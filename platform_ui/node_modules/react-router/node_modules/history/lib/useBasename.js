'use strict';

exports.__esModule = true;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function useBasename(createHistory) {
  return function () {
    var options = arguments.length <= 0 || arguments[0] === undefined ? {} : arguments[0];
    var basename = options.basename;

    var historyOptions = _objectWithoutProperties(options, ['basename']);

    var history = createHistory(historyOptions);

    function listen(listener) {
      return history.listen(function (location) {
        // When new locations are emitted, remove the
        // basename from the beginning of the pathname.
        if (location.pathname.indexOf(basename) === 0) location.pathname = location.pathname.replace(basename, '');

        listener(location);
      });
    }

    // Override all navigation functions with basename-aware versions.
    function pushState(state, path) {
      history.pushState(state, createPath(path));
    }

    function replaceState(state, path) {
      history.replaceState(state, createPath(path));
    }

    function createPath(path) {
      return basename + path;
    }

    function createHref(path) {
      return history.createHref(createPath(path));
    }

    return _extends({}, history, {
      listen: listen,
      pushState: pushState,
      replaceState: replaceState,
      createPath: createPath,
      createHref: createHref
    });
  };
}

exports['default'] = useBasename;
module.exports = exports['default'];